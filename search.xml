<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DualBot Explorer 項目開發</title>
    <url>/2025/02/02/DualBot-Explorer/</url>
    <content><![CDATA[<h2 style="text-align: center;">項目介紹    Introduction</h2>

<p><span style="color:orange"> DualBot Explorer</span> 是一個創新的<span style="color:orange">學術輔助系統</span>，通過兩個AI的互動獲取更為<span style="color:orange">全面</span>和<span style="color:orange">客觀</span>的資訊與見解。無論是想了解<span style="color:orange">某個議題的不同觀點</span>、理解一篇<span style="color:orange">學術論文的內容</span>，還是想在<span style="color:orange">發表論文</span>前得到<span style="color:orange">專業意見</span>，DualBot Explorer 都能提供協助。</p>
<p>項目網站：<a class="link"   href="https://dualbot.streamlit.app/" >https://dualbot.streamlit.app<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>GitHub Repository：<a class="link"   href="https://github.com/KunYing-Lee/DualbotExplorer" >https://github.com/KunYing-Lee/DualbotExplorer<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/KunYing-Lee/DualbotExplorer.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> DualbotExplorer</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div>

<h3 id="系統架構"><a href="#系統架構" class="headerlink" title="系統架構"></a>系統架構</h3><ul>
<li><strong>後端框架：</strong>採用基於 <span style="color:orange">LangChain</span> 架構的<span style="color:orange">多智能體系統</span>（Multi-Agent System, M.A.S.）和對話鏈（Conversation Chain）</li>
<li><strong>模型選擇：</strong>使用 <span style="color:orange">OpenAI GPT-4o</span> 作為基礎模型，通過不同的<span style="color:orange">溫度參數</span>（Temperature）調節輸出的<span style="color:orange">創造性</span></li>
<li><strong>向量存儲：</strong>使用 <span style="color:orange">FAISS</span>（Facebook AI Similarity Search）實現高效的文本嵌入檢索</li>
<li><strong>前段實現：</strong>基於 <span style="color:orange">Streamlit 框架</span>，實現響應式（Responsive）的網頁應用</li>
<li><strong>編程語言：</strong>大部分採用 <span style="color:orange">Python</span> 3.12.7，亦在前端頁面調整中使用 <span style="color:orange">CSS</span>，在頁面排版時採用 <span style="color:orange">Markdown</span></li>
</ul>
<h3 id="功能模組"><a href="#功能模組" class="headerlink" title="功能模組"></a>功能模組</h3><ol>
<li><p><strong>辯論模式（Debate Mode）</strong></p>
<p> 該模式通過配置<span style="color:orange">兩個持不同立場的 AI</span> 進行結構化辯論，實現對<span style="color:orange">特定議題</span>的深入探討，並生成<span style="color:orange">總結</span>以整理<span style="color:orange">雙方論點</span>與<span style="color:orange">爭議焦點</span>，可協助群眾、決策者全面、客觀地了解一項議題的正反面。</p>
</li>
<li><p><strong>論文解析模式（Paper Digest Mode）</strong></p>
<p> 通過模擬<span style="color:orange">專業記者</span>對<span style="color:orange">論文作者</span>的採訪過程，實現對學術論文的深度解讀。其可幫助學者更高效地完成<span style="color:orange">文獻綜述</span>（Literature Review）。</p>
</li>
<li><p><strong>同行評審模式（Peer-review Simulation Mode）</strong></p>
<p> 模擬學術論文的<span style="color:orange">同行評審流程</span>，為論文作者生成<span style="color:orange">評審意見</span>和<span style="color:orange">修改建議</span>。其可幫助學者在完成論文初稿後評估可期修改之處。</p>
</li>
</ol>
<h2 style="text-align: center;">開發歷程    Development Process</h2>

<h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><pre class="mermaid">graph TD
    A["DualBotExplorer"] --> B["main.py"]
    A --> C["debate.py"]
    A --> D["paper_digest.py"]
    A --> E["peer_review.py"]

    C --> F["DebateBot Class"]
    C --> G["DualDebateBots Class"]
    
    B --> H["Streamlit Frontend"]
    
    D --> K["Vector Database"]
    D --> L["Paper Analysis"]
    
    E --> M["Review System"]
    E --> N["Feedback Generator"]

%% Project structure visualization
%% Core components and their relationships
%% Based on LangChain architecture</pre>

<h3 id="辯論模式（Debate-Mode）"><a href="#辯論模式（Debate-Mode）" class="headerlink" title="辯論模式（Debate Mode）"></a>辯論模式（Debate Mode）</h3><p><strong>類（Class）：</strong></p>
<ul>
<li><code>DebateBot</code> ：單一 AI 辯手</li>
<li><code>DualDebateBots</code> ：雙 AI 結構化辯論</li>
</ul>
<p><strong>代碼實現（debate.py）</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate, </span><br><span class="line">    MessagesPlaceholder,</span><br><span class="line">    SystemMessagePromptTemplate,</span><br><span class="line">    HumanMessagePromptTemplate,</span><br><span class="line">    PromptTemplate</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> ConversationChain</span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.memory <span class="keyword">import</span> ConversationBufferMemory</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebateBot</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;單一AI辯論類別，負責特定立場的論述生成與對話管理&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化辯論AI</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            engine: 模型引擎類型（目前僅支援OpenAI）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 模型選擇邏輯</span></span><br><span class="line">        <span class="keyword">if</span> engine == <span class="string">&#x27;OpenAI&#x27;</span>:</span><br><span class="line">            <span class="comment"># 使用gpt-4o模型，temperature=0.7平衡創造性與連貫性</span></span><br><span class="line">            <span class="variable language_">self</span>.llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-4o&quot;</span>, temperature=<span class="number">0.7</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&quot;Unsupported chat model!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化對話記憶體，保存完整歷史訊息</span></span><br><span class="line">        <span class="variable language_">self</span>.memory = ConversationBufferMemory(return_messages=<span class="literal">True</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self, role, oppo_role, scenario, session_length, starter=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        設定辯論參數並初始化對話鏈</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            role: 本體角色設定（字典含name等屬性）</span></span><br><span class="line"><span class="string">            oppo_role: 對手角色設定</span></span><br><span class="line"><span class="string">            scenario: 辯論主題場景</span></span><br><span class="line"><span class="string">            session_length: 會話長度（Short/Long）</span></span><br><span class="line"><span class="string">            starter: 是否為先發辯手</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 儲存辯論參數</span></span><br><span class="line">        <span class="variable language_">self</span>.role = role</span><br><span class="line">        <span class="variable language_">self</span>.oppo_role = oppo_role</span><br><span class="line">        <span class="variable language_">self</span>.scenario = scenario</span><br><span class="line">        <span class="variable language_">self</span>.session_length = session_length</span><br><span class="line">        <span class="variable language_">self</span>.starter = starter</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 組合多層次提示模板</span></span><br><span class="line">        prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">            <span class="comment"># 系統提示：定義AI行為準則與辯論規則</span></span><br><span class="line">            SystemMessagePromptTemplate.from_template(<span class="variable language_">self</span>._specify_system_message()),</span><br><span class="line">            <span class="comment"># 歷史訊息佔位符：自動注入對話記憶體</span></span><br><span class="line">            MessagesPlaceholder(variable_name=<span class="string">&quot;history&quot;</span>),</span><br><span class="line">            <span class="comment"># 用戶輸入模板：接收對手論點作為輸入</span></span><br><span class="line">            HumanMessagePromptTemplate.from_template(<span class="string">&quot;&quot;&quot;&#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line">        ])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建立對話鏈實例</span></span><br><span class="line">        <span class="variable language_">self</span>.conversation = ConversationChain(</span><br><span class="line">            memory=<span class="variable language_">self</span>.memory,  <span class="comment"># 注入記憶體</span></span><br><span class="line">            prompt=prompt,       <span class="comment"># 使用組合提示模板</span></span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,        <span class="comment"># 指定語言模型</span></span><br><span class="line">            verbose=<span class="literal">False</span>        <span class="comment"># 關閉調試輸出</span></span><br><span class="line">        )</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_specify_system_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成系統級別的行為指令（核心邏輯）</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            str: 完整系統提示模板</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 根據會話長度決定論點交換次數</span></span><br><span class="line">        exchange_counts = &#123;</span><br><span class="line">            <span class="string">&#x27;Short&#x27;</span>: <span class="number">4</span>,  <span class="comment"># 短會話：4次論點交換</span></span><br><span class="line">            <span class="string">&#x27;Long&#x27;</span>: <span class="number">8</span>    <span class="comment"># 長會話：8次深度辯論</span></span><br><span class="line">        &#125;[<span class="variable language_">self</span>.session_length]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基礎指令模板</span></span><br><span class="line">        prompt = <span class="string">f&quot;&quot;&quot;You are an AI debater participating in a debate about: 		<span class="subst">&#123;self.scenario&#125;</span></span></span><br><span class="line"><span class="string">        Role: <span class="subst">&#123;self.role[<span class="string">&#x27;name&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string">        - Present clear arguments with supporting evidence</span></span><br><span class="line"><span class="string">        - Address opponent&#x27;s points directly</span></span><br><span class="line"><span class="string">        - Maintain logical consistency</span></span><br><span class="line"><span class="string">        - Use academic tone but remain accessible</span></span><br><span class="line"><span class="string">        - Limit responses to 3-5 concise paragraphs</span></span><br><span class="line"><span class="string">        - You will exchange arguments <span class="subst">&#123;exchange_counts&#125;</span> times&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加先發/後發指令</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.starter:</span><br><span class="line">            prompt += <span class="string">&quot;\nYou will initiate the debate.&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prompt += <span class="string">f&quot;\nWait for <span class="subst">&#123;self.oppo_role[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&#x27;s opening statement.&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prompt</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DualDebateBots</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;雙AI協調類別，管理辯論流程與互動邏輯&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine, role_dict, scenario, session_length</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化雙AI系統</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            engine: 模型引擎類型</span></span><br><span class="line"><span class="string">            role_dict: 角色設定字典（需包含role1/role2）</span></span><br><span class="line"><span class="string">            scenario: 辯論主題</span></span><br><span class="line"><span class="string">            session_length: 會話長度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.chatbots = role_dict</span><br><span class="line">        <span class="variable language_">self</span>.engine = engine</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 為每個角色實例化辯論AI</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> role_dict.keys():</span><br><span class="line">            <span class="variable language_">self</span>.chatbots[k].update(&#123;<span class="string">&#x27;chatbot&#x27;</span>: DebateBot(engine)&#125;)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 初始化正方AI（先發）</span></span><br><span class="line">        <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role1&#x27;</span>][<span class="string">&#x27;chatbot&#x27;</span>].instruct(</span><br><span class="line">            role=<span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role1&#x27;</span>],</span><br><span class="line">            oppo_role=<span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role2&#x27;</span>],</span><br><span class="line">            scenario=scenario,</span><br><span class="line">            session_length=session_length,</span><br><span class="line">            starter=<span class="literal">True</span>  <span class="comment"># 標記為先發辯手</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化反方AI（後發）</span></span><br><span class="line">        <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role2&#x27;</span>][<span class="string">&#x27;chatbot&#x27;</span>].instruct(</span><br><span class="line">            role=<span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role2&#x27;</span>],</span><br><span class="line">            oppo_role=<span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role1&#x27;</span>],</span><br><span class="line">            scenario=scenario,</span><br><span class="line">            session_length=session_length,</span><br><span class="line">            starter=<span class="literal">False</span>  <span class="comment"># 標記為後發辯手</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重置對話歷史</span></span><br><span class="line">        <span class="variable language_">self</span>._reset_conversation_history()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;執行一輪辯論對話（正方-&gt;反方）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 正方生成回應（使用當前輸入）</span></span><br><span class="line">        output1 = <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role1&#x27;</span>】[<span class="string">&#x27;chatbot&#x27;</span>].conversation.predict(<span class="built_in">input</span>=<span class="variable language_">self</span>.input1)</span><br><span class="line">        <span class="variable language_">self</span>.conversation_history.append(&#123;<span class="string">&quot;bot&quot;</span>: <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role1&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;text&quot;</span>: output1&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反方生成回應（以正方輸出作為輸入）</span></span><br><span class="line">        output2 = <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role2&#x27;</span>][<span class="string">&#x27;chatbot&#x27;</span>].conversation.predict(<span class="built_in">input</span>=output1)</span><br><span class="line">        <span class="variable language_">self</span>.conversation_history.append(&#123;<span class="string">&quot;bot&quot;</span>: <span class="variable language_">self</span>.chatbots[<span class="string">&#x27;role2&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;text&quot;</span>: output2&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新輸入為反方輸出，準備下一輪</span></span><br><span class="line">        <span class="variable language_">self</span>.input1 = output2</span><br><span class="line">        <span class="keyword">return</span> output1, output2  <span class="comment"># 返回本輪雙方論點</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self, script</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;生成辯論總結報告&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用溫度較低（0.5）的模型確保總結客觀性</span></span><br><span class="line">        summary_bot = ChatOpenAI(model_name=<span class="string">&quot;gpt-4o&quot;</span>, temperature=<span class="number">0.5</span>)</span><br><span class="line">        instruction = <span class="string">&quot;&quot;&quot;Analyze this debate transcript and create a structured summary:</span></span><br><span class="line"><span class="string">        1. List Pro&#x27;s main arguments with supporting points</span></span><br><span class="line"><span class="string">        2. List Con&#x27;s main arguments with supporting points</span></span><br><span class="line"><span class="string">        3. Highlight key areas of disagreement</span></span><br><span class="line"><span class="string">        4. Note any unresolved questions</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Debate transcript: &#123;script&#125;&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建立總結鏈</span></span><br><span class="line">        prompt = PromptTemplate(</span><br><span class="line">            input_variables=[<span class="string">&quot;script&quot;</span>],</span><br><span class="line">            template=instruction,</span><br><span class="line">        )</span><br><span class="line">        summary_chain = LLMChain(llm=summary_bot, prompt=prompt)</span><br><span class="line">        <span class="keyword">return</span> summary_chain.predict(script=script)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_reset_conversation_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重置對話歷史記錄&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.conversation_history = []  <span class="comment"># 存儲完整對話記錄</span></span><br><span class="line">        <span class="variable language_">self</span>.input1 = <span class="string">&quot;Begin the debate.&quot;</span>  <span class="comment"># 初始觸發指令</span></span><br></pre></td></tr></table></figure></div>

<h3 id="論文解析模式（Paper-Digest-Mode）"><a href="#論文解析模式（Paper-Digest-Mode）" class="headerlink" title="論文解析模式（Paper Digest Mode）"></a>論文解析模式（Paper Digest Mode）</h3><p><strong>類（Class）：</strong></p>
<ul>
<li><code>Chatbot</code> ：定義AI通用接口</li>
<li><code>JournalistBot</code> ：記者AI類別，負責提出深度技術問題</li>
<li><code>AuthorBot</code> ：作者AI類別，基於論文內容生成專業回答</li>
</ul>
<p><strong>代碼實現（paper_digest.py）</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> ConversationalRetrievalChain</span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate, </span><br><span class="line">    MessagesPlaceholder, </span><br><span class="line">    SystemMessagePromptTemplate, </span><br><span class="line">    HumanMessagePromptTemplate,</span><br><span class="line">    PromptTemplate</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> ConversationChain, LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.memory <span class="keyword">import</span> ConversationBufferMemory</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chatbot</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽象基礎類別，定義AI通用接口&quot;&quot;&quot;</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化基礎聊天AI</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            engine: 模型引擎類型（目前僅支援OpenAI）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 統一模型初始化邏輯</span></span><br><span class="line">        <span class="keyword">if</span> engine == <span class="string">&#x27;OpenAI&#x27;</span>:</span><br><span class="line">            <span class="comment"># 使用gpt-4o模型，temperature=0.8保持技術性回答的創造性</span></span><br><span class="line">            <span class="variable language_">self</span>.llm = ChatOpenAI(</span><br><span class="line">                model_name=<span class="string">&quot;gpt-4o&quot;</span>,</span><br><span class="line">                temperature=<span class="number">0.8</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&quot;Currently unsupported chat model type!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;設定AI特定任務參數（需子類實現）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;執行單步對話交互（需子類實現）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_specify_system_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成系統級行為指令（需子類實現）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JournalistBot</span>(<span class="title class_ inherited__">Chatbot</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;記者AI類別，負責提出深度技術問題&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(engine)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化對話記憶體，保存完整訪談歷史</span></span><br><span class="line">        <span class="variable language_">self</span>.memory = ConversationBufferMemory(return_messages=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self, topic, abstract</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        設定記者AI採訪參數</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            topic: 論文研究主題</span></span><br><span class="line"><span class="string">            abstract: 論文摘要文字</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.topic = topic</span><br><span class="line">        <span class="variable language_">self</span>.abstract = abstract</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建立三層次提示模板</span></span><br><span class="line">        prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">            <span class="comment"># 系統層：定義採訪目標與行為準則</span></span><br><span class="line">            SystemMessagePromptTemplate.from_template(<span class="variable language_">self</span>._specify_system_message()),</span><br><span class="line">            <span class="comment"># 歷史層：自動注入對話記錄</span></span><br><span class="line">            MessagesPlaceholder(variable_name=<span class="string">&quot;history&quot;</span>),</span><br><span class="line">            <span class="comment"># 輸入層：接收作者回答作為觸發</span></span><br><span class="line">            HumanMessagePromptTemplate.from_template(<span class="string">&quot;&quot;&quot;&#123;input&#125;&quot;&quot;&quot;</span>)</span><br><span class="line">        ])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 創建會話鏈實例</span></span><br><span class="line">        <span class="variable language_">self</span>.conversation = ConversationChain(</span><br><span class="line">            memory=<span class="variable language_">self</span>.memory,  <span class="comment"># 綁定記憶體</span></span><br><span class="line">            prompt=prompt,       <span class="comment"># 使用組合提示模板</span></span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,        <span class="comment"># 指定語言模型</span></span><br><span class="line">            verbose=<span class="literal">False</span>        <span class="comment"># 關閉調試輸出</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, prompt</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成記者提問</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            prompt: 作者前次回答內容</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            str: 新生成的問題</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 基於對話歷史預測下個問題</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.conversation.predict(<span class="built_in">input</span>=prompt)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_specify_system_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;構建記者專用系統指令（核心邏輯）&quot;&quot;&quot;</span></span><br><span class="line">        prompt = <span class="string">f&quot;&quot;&quot;You are a technical journalist interested in <span class="subst">&#123;self.topic&#125;</span>, </span></span><br><span class="line"><span class="string">        Your task is to distill a recently published scientific paper on this topic through</span></span><br><span class="line"><span class="string">        an interview with the author, which is played by another chatbot.</span></span><br><span class="line"><span class="string">        Your objective is to ask comprehensive and technical questions </span></span><br><span class="line"><span class="string">        so that anyone who reads the interview can understand the paper&#x27;s main ideas and contributions, </span></span><br><span class="line"><span class="string">        even without reading the paper itself. </span></span><br><span class="line"><span class="string">        You&#x27;re provided with the paper&#x27;s summary to guide your initial questions.</span></span><br><span class="line"><span class="string">        You must keep the following guidelines in mind:</span></span><br><span class="line"><span class="string">        - Focus exclusive on the technical content of the paper.</span></span><br><span class="line"><span class="string">        - Avoid general questions about <span class="subst">&#123;self.topic&#125;</span>, focusing instead on specifics related to the paper.</span></span><br><span class="line"><span class="string">        - Only ask one question at a time.</span></span><br><span class="line"><span class="string">        - Feel free to ask about the study&#x27;s purpose, methods, results, and significance, </span></span><br><span class="line"><span class="string">        and clarify any technical terms or complex concepts. </span></span><br><span class="line"><span class="string">        - Your goal is to lead the conversation towards a clear and engaging summary.</span></span><br><span class="line"><span class="string">        - Do not include any prefixed labels like &quot;Interviewer:&quot; or &quot;Question:&quot; in your question.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [Abstract]: <span class="subst">&#123;self.abstract&#125;</span>&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorBot</span>(<span class="title class_ inherited__">Chatbot</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;作者AI類別，基於論文內容生成專業回答&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine, vectorstore, debug=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化作者AI</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            vectorstore: FAISS向量資料庫（儲存論文嵌入）</span></span><br><span class="line"><span class="string">            debug: 調試模式開關</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(engine)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.chat_history = []  <span class="comment"># 獨立記憶體存儲QA對</span></span><br><span class="line">        <span class="variable language_">self</span>.vectorstore = vectorstore  <span class="comment"># 論文向量檢索系統</span></span><br><span class="line">        <span class="variable language_">self</span>.debug = debug</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 獨立總結模型（temperature=0.5確保摘要客觀性）</span></span><br><span class="line">        <span class="variable language_">self</span>.summary_bot = ChatOpenAI(model_name=<span class="string">&quot;gpt-4o&quot;</span>, temperature=<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self, topic</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        設定作者AI參數</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            topic: 論文研究主題</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.topic = topic</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建立問答提示模板</span></span><br><span class="line">        qa_prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">            <span class="comment"># 系統層：定義回答規範與知識來源</span></span><br><span class="line">            SystemMessagePromptTemplate.from_template(<span class="variable language_">self</span>._specify_system_message()),</span><br><span class="line">            <span class="comment"># 問題輸入層</span></span><br><span class="line">            HumanMessagePromptTemplate.from_template(<span class="string">&quot;&#123;question&#125;&quot;</span>)</span><br><span class="line">        ])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 創建檢索增強型對話鏈</span></span><br><span class="line">        <span class="variable language_">self</span>.conversation_qa = ConversationalRetrievalChain.from_llm(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            verbose=<span class="variable language_">self</span>.debug,</span><br><span class="line">            retriever=<span class="variable language_">self</span>.vectorstore.as_retriever(</span><br><span class="line">                search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">3</span>&#125;  <span class="comment"># 檢索前3相關文檔片段</span></span><br><span class="line">            ),</span><br><span class="line">            chain_type=<span class="string">&quot;stuff&quot;</span>,  <span class="comment"># 文檔處理方式</span></span><br><span class="line">            return_source_documents=<span class="literal">True</span>,  <span class="comment"># 返回引用來源</span></span><br><span class="line">            combine_docs_chain_kwargs=&#123;<span class="string">&#x27;prompt&#x27;</span>: qa_prompt&#125;  <span class="comment"># 注入自定義提示</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, prompt</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成作者回答</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            prompt: 記者提問內容</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            tuple: (回答文字, 來源文檔)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 執行檢索增強型問答</span></span><br><span class="line">        response = <span class="variable language_">self</span>.conversation_qa(&#123;</span><br><span class="line">            <span class="string">&quot;question&quot;</span>: prompt, </span><br><span class="line">            <span class="string">&quot;chat_history&quot;</span>: <span class="variable language_">self</span>.chat_history</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment"># 記錄問答對</span></span><br><span class="line">        <span class="variable language_">self</span>.chat_history.append((prompt, response[<span class="string">&quot;answer&quot;</span>]))</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&quot;answer&quot;</span>], response[<span class="string">&quot;source_documents&quot;</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_specify_system_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;構建作者專用系統指令（核心邏輯）&quot;&quot;&quot;</span></span><br><span class="line">        prompt = <span class="string">f&quot;&quot;&quot;You are the author of a recently published scientific paper on <span class="subst">&#123;self.topic&#125;</span>.</span></span><br><span class="line"><span class="string">        You are being interviewed by a technical journalist who is played by another chatbot and</span></span><br><span class="line"><span class="string">        looking to write an article to summarize your paper.</span></span><br><span class="line"><span class="string">        Your task is to provide comprehensive, clear, and accurate answers to the journalist&#x27;s questions.</span></span><br><span class="line"><span class="string">        Please keep the following guidelines in mind:</span></span><br><span class="line"><span class="string">        - Try to explain complex concepts and technical terms in an understandable way, without sacrificing accuracy.</span></span><br><span class="line"><span class="string">        - Your responses should primarily come from the relevant content of this paper, </span></span><br><span class="line"><span class="string">        which will be provided to you in the following, but you can also use your broad knowledge in <span class="subst">&#123;self.topic&#125;</span> to </span></span><br><span class="line"><span class="string">        provide context or clarify complex topics. </span></span><br><span class="line"><span class="string">        - Remember to differentiate when you are providing information directly from the paper versus </span></span><br><span class="line"><span class="string">        when you&#x27;re giving additional context or interpretation. Use phrases like &#x27;According to the paper...&#x27; for direct information, </span></span><br><span class="line"><span class="string">        and &#x27;Based on general knowledge in the field...&#x27; when you&#x27;re providing additional context.</span></span><br><span class="line"><span class="string">        - Only answer one question at a time. Ensure that each answer is complete before moving on to the next question.</span></span><br><span class="line"><span class="string">        - Do not include any prefixed labels like &quot;Author:&quot;, &quot;Interviewee:&quot;, Respond:&quot;, or &quot;Answer:&quot; in your answer.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self, script</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成訪談摘要報告</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            script: 完整訪談記錄文本</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            str: 結構化摘要內容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 定義四維度摘要指令</span></span><br><span class="line">        instruction = <span class="string">&quot;&quot;&quot;Analyze this interview transcript and extract key insights:</span></span><br><span class="line"><span class="string">        1. Identify 3-5 main technical contributions</span></span><br><span class="line"><span class="string">        2. List important technical terms with explanations</span></span><br><span class="line"><span class="string">        3. Highlight novel methodologies</span></span><br><span class="line"><span class="string">        4. Summarize practical implications</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Interview transcript: &#123;script&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立摘要鏈</span></span><br><span class="line">        prompt_template = PromptTemplate(</span><br><span class="line">            input_variables=[<span class="string">&quot;script&quot;</span>],</span><br><span class="line">            template=instruction,</span><br><span class="line">        )</span><br><span class="line">        summary_chain = LLMChain(llm=<span class="variable language_">self</span>.summary_bot, prompt=prompt_template)</span><br><span class="line">        <span class="keyword">return</span> summary_chain.predict(script=script)</span><br></pre></td></tr></table></figure></div>

<h3 id="論文解析模式（Paper-Digest-Mode）-1"><a href="#論文解析模式（Paper-Digest-Mode）-1" class="headerlink" title="論文解析模式（Paper Digest Mode）"></a>論文解析模式（Paper Digest Mode）</h3><p><strong>類（Class）：</strong></p>
<ul>
<li><code>PeerReviewAuthorBot</code> ：論文作者AI類別，負責回應評審意見與維護答辯記錄</li>
<li><code>PeerReviewReviewerBot</code> ：評審專家AI類別，負責生成質詢問題與最終裁決</li>
</ul>
<p><strong>代碼實現（peer_review.py）</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeerReviewAuthorBot</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;論文作者AI類別，負責回應評審意見與維護答辯記錄&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化作者AI</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            engine: 模型引擎類型（保留參數以備擴展）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用gpt-4o模型，temperature=0.7平衡學術嚴謹性與解釋彈性</span></span><br><span class="line">        <span class="variable language_">self</span>.llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-4o&quot;</span>, temperature=<span class="number">0.7</span>)</span><br><span class="line">        <span class="variable language_">self</span>.responses = []  <span class="comment"># 存儲(問題,回應)元組的答辯記錄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self, title, abstract, vectorstore</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        載入論文核心資訊</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            title: 論文標題</span></span><br><span class="line"><span class="string">            abstract: 論文摘要</span></span><br><span class="line"><span class="string">            vectorstore: 論文向量資料庫（預留檢索增強功能）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.abstract = abstract</span><br><span class="line">        <span class="variable language_">self</span>.vectorstore = vectorstore</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 構建作者行為準則系統提示</span></span><br><span class="line">        <span class="variable language_">self</span>.system_prompt = <span class="string">f&quot;&quot;&quot;You are the author of &quot;<span class="subst">&#123;title&#125;</span>&quot;. Your task:</span></span><br><span class="line"><span class="string">        - Defend your methodology and results</span></span><br><span class="line"><span class="string">        - Provide additional evidence from the paper</span></span><br><span class="line"><span class="string">        - Address reviewer concerns professionally</span></span><br><span class="line"><span class="string">        - Reference specific sections</span></span><br><span class="line"><span class="string">        - Maintain academic tone</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Abstract: <span class="subst">&#123;abstract&#125;</span>&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">respond_to_question</span>(<span class="params">self, question</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成學術答辯回應</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            question: 評審提問文本</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            str: 結構化答辯內容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 組合動態提示模板</span></span><br><span class="line">        prompt = PromptTemplate(</span><br><span class="line">            input_variables=[<span class="string">&quot;question&quot;</span>],</span><br><span class="line">            template=<span class="string">f&quot;&quot;&quot;<span class="subst">&#123;self.system_prompt&#125;</span></span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            Reviewer Question: &#123;&#123;question&#125;&#125;</span></span><br><span class="line"><span class="string">            Author Response:&quot;&quot;&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 執行問答鏈並記錄歷史</span></span><br><span class="line">        chain = LLMChain(llm=<span class="variable language_">self</span>.llm, prompt=prompt)</span><br><span class="line">        response = chain.run(&#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line">        <span class="variable language_">self</span>.responses.append((question, response))</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summarize_responses</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成答辯總結報告</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            str: 結構化分析結果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 三維度分析指令模板</span></span><br><span class="line">        summary_prompt = <span class="string">&quot;&quot;&quot;Analyze these author responses:</span></span><br><span class="line"><span class="string">        &#123;responses&#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Identify:</span></span><br><span class="line"><span class="string">        1. 3 strongest defenses</span></span><br><span class="line"><span class="string">        2. 2 potential weaknesses</span></span><br><span class="line"><span class="string">        3. Key evidence provided&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> LLMChain(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm, </span><br><span class="line">            prompt=PromptTemplate.from_template(summary_prompt)</span><br><span class="line">        ).run(&#123;<span class="string">&quot;responses&quot;</span>: <span class="variable language_">self</span>.responses&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeerReviewReviewerBot</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;評審專家AI類別，負責生成質詢問題與最終裁決&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, engine</span>):</span><br><span class="line">        <span class="variable language_">self</span>.llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-4o&quot;</span>)  <span class="comment"># 基礎模型實例</span></span><br><span class="line">        <span class="variable language_">self</span>.critiques = []  <span class="comment"># 存儲累積質詢問題</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instruct</span>(<span class="params">self, title, abstract, focus_areas, rigor_level</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        設定評審參數</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            title: 論文標題</span></span><br><span class="line"><span class="string">            abstract: 論文摘要</span></span><br><span class="line"><span class="string">            focus_areas: 重點審查領域列表（如方法論、倫理等）</span></span><br><span class="line"><span class="string">            rigor_level: 嚴謹程度（0-100轉換為溫度參數）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 動態溫度調節：嚴謹性越高→溫度越低→輸出越確定</span></span><br><span class="line">        <span class="variable language_">self</span>.llm.temperature = <span class="number">0.9</span> - (rigor_level/<span class="number">100</span> * <span class="number">0.8</span>)  <span class="comment"># 0.1~0.9線性映射</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 構建評審準則系統提示</span></span><br><span class="line">        <span class="variable language_">self</span>.system_prompt = <span class="string">f&quot;&quot;&quot;As peer reviewer of &quot;<span class="subst">&#123;title&#125;</span>&quot;:</span></span><br><span class="line"><span class="string">        - Focus: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(focus_areas)&#125;</span></span></span><br><span class="line"><span class="string">        - Rigor: <span class="subst">&#123;rigor_level&#125;</span>/100</span></span><br><span class="line"><span class="string">        - Ask probing questions</span></span><br><span class="line"><span class="string">        - Identify methodological flaws</span></span><br><span class="line"><span class="string">        - Verify statistical validity</span></span><br><span class="line"><span class="string">        - Check ethical compliance</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Abstract: <span class="subst">&#123;abstract&#125;</span>&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成單個質詢問題&quot;&quot;&quot;</span></span><br><span class="line">        prompt = PromptTemplate(</span><br><span class="line">            input_variables=[],</span><br><span class="line">            template=<span class="string">f&quot;&quot;&quot;<span class="subst">&#123;self.system_prompt&#125;</span></span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            Generate a critical review question:&quot;&quot;&quot;</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        chain = LLMChain(llm=<span class="variable language_">self</span>.llm, prompt=prompt)</span><br><span class="line">        question = chain.run(&#123;&#125;)</span><br><span class="line">        <span class="variable language_">self</span>.critiques.append(question)</span><br><span class="line">        <span class="keyword">return</span> question</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_verdict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成最終評審裁決&quot;&quot;&quot;</span></span><br><span class="line">        verdict_template = <span class="string">&quot;&quot;&quot;Based on these critiques:</span></span><br><span class="line"><span class="string">        &#123;critiques&#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Final recommendations:</span></span><br><span class="line"><span class="string">        1. Accept/Revise/Reject</span></span><br><span class="line"><span class="string">        2. Required revisions</span></span><br><span class="line"><span class="string">        3. Suggested improvements&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> LLMChain(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            prompt=PromptTemplate.from_template(verdict_template)</span><br><span class="line">        ).run(&#123;<span class="string">&quot;critiques&quot;</span>: <span class="variable language_">self</span>.critiques&#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summarize_critiques</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成質詢總結報告&quot;&quot;&quot;</span></span><br><span class="line">        summary_prompt = <span class="string">&quot;&quot;&quot;Analyze review critiques:</span></span><br><span class="line"><span class="string">        &#123;critiques&#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Extract:</span></span><br><span class="line"><span class="string">        1. Methodological concerns</span></span><br><span class="line"><span class="string">        2. Statistical issues</span></span><br><span class="line"><span class="string">        3. Ethical considerations</span></span><br><span class="line"><span class="string">        4. Suggested improvements&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> LLMChain(</span><br><span class="line">            llm=<span class="variable language_">self</span>.llm,</span><br><span class="line">            prompt=PromptTemplate.from_template(summary_prompt)</span><br><span class="line">        ).run(&#123;<span class="string">&quot;critiques&quot;</span>: <span class="variable language_">self</span>.critiques&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="項目整合"><a href="#項目整合" class="headerlink" title="項目整合"></a>項目整合</h3><p><strong>代碼實現（main.py）</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">from</span> streamlit_chat <span class="keyword">import</span> message  <span class="comment"># 對話氣泡組件</span></span><br><span class="line"><span class="keyword">from</span> debate <span class="keyword">import</span> DualDebateBots</span><br><span class="line"><span class="keyword">from</span> paper_digest <span class="keyword">import</span> JournalistBot, AuthorBot</span><br><span class="line"><span class="keyword">from</span> peer_review <span class="keyword">import</span> PeerReviewAuthorBot, PeerReviewReviewerBot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> FAISS  <span class="comment"># 向量檢索庫</span></span><br><span class="line"><span class="keyword">from</span> langchain.embeddings <span class="keyword">import</span> OpenAIEmbeddings  <span class="comment"># 文本嵌入模型</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyPDFLoader  <span class="comment"># PDF解析器</span></span><br><span class="line"><span class="comment"># === 全局設定 ===</span></span><br><span class="line">SESSION_LENGTHS = [<span class="string">&#x27;Short&#x27;</span>, <span class="string">&#x27;Long&#x27;</span>]  <span class="comment"># 會話長度選項</span></span><br><span class="line">MAX_EXCHANGE_COUNTS = &#123;  <span class="comment"># 各模式最大交互次數</span></span><br><span class="line">    <span class="string">&#x27;Short&#x27;</span>: &#123;<span class="string">&#x27;Debate&#x27;</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;Long&#x27;</span>: &#123;<span class="string">&#x27;Debate&#x27;</span>: <span class="number">8</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">AVATAR_SEED = [<span class="number">123</span>, <span class="number">42</span>]  <span class="comment"># 機器人頭像隨機種子</span></span><br><span class="line">MODES = &#123;  <span class="comment"># 模式配置(圖示/顏色)</span></span><br><span class="line">    <span class="string">&quot;Debate&quot;</span>: &#123;<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;🗣️&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FF6B6B&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;Paper Digest&quot;</span>: &#123;<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;📄&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#4ECDC4&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;Peer-review Simulation&quot;</span>: &#123;<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;🔍&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FF9F43&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># --- 自定義CSS樣式 ---</span></span><br><span class="line">st.markdown(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">    /* 標題樣式 */</span></span><br><span class="line"><span class="string">    .header-text &#123;</span></span><br><span class="line"><span class="string">        font-size: 2.5rem !important;</span></span><br><span class="line"><span class="string">        font-weight: 700 !important;</span></span><br><span class="line"><span class="string">        color: #2d3436 !important;</span></span><br><span class="line"><span class="string">        margin-bottom: 1rem !important;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 模式卡片動畫效果 */</span></span><br><span class="line"><span class="string">    .mode-card &#123;</span></span><br><span class="line"><span class="string">        padding: 2rem;</span></span><br><span class="line"><span class="string">        border-radius: 15px;</span></span><br><span class="line"><span class="string">        box-shadow: 0 4px 6px rgba(0,0,0,0.1);</span></span><br><span class="line"><span class="string">        transition: transform 0.2s;</span></span><br><span class="line"><span class="string">        background: white;</span></span><br><span class="line"><span class="string">        margin: 1rem 0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .mode-card:hover &#123;</span></span><br><span class="line"><span class="string">        transform: translateY(-5px);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 側邊欄背景 */</span></span><br><span class="line"><span class="string">    .sidebar .sidebar-content &#123;</span></span><br><span class="line"><span class="string">        background-color: #f8f9fa;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 按鈕動態效果 */</span></span><br><span class="line"><span class="string">    .stButton&gt;button &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        transition: all 0.2s;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .stButton&gt;button:hover &#123;</span></span><br><span class="line"><span class="string">        transform: scale(1.02);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>, unsafe_allow_html=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># --- 應用標題 ---</span></span><br><span class="line">st.markdown(<span class="string">&#x27;&lt;p class=&quot;header-text&quot;&gt;DualBot Explorer 🤖💬&lt;/p&gt;&#x27;</span>, unsafe_allow_html=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模式介紹擴展區</span></span><br><span class="line"><span class="keyword">with</span> st.expander(<span class="string">&quot;🌟 Welcome to DualBot Explorer!&quot;</span>, expanded=<span class="literal">True</span>):</span><br><span class="line">    cols = st.columns(<span class="number">3</span>)  <span class="comment"># 三欄布局</span></span><br><span class="line">    <span class="keyword">for</span> i, (mode_name, config) <span class="keyword">in</span> <span class="built_in">enumerate</span>(MODES.items()):</span><br><span class="line">        <span class="keyword">with</span> cols[i]:</span><br><span class="line">            <span class="comment"># 動態生成模式卡片</span></span><br><span class="line">            st.markdown(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             &lt;div class=&quot;mode-card&quot; style=&quot;border-left: 5px solid <span class="subst">&#123;config[<span class="string">&#x27;color&#x27;</span>]&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h3&gt;<span class="subst">&#123;config[<span class="string">&#x27;icon&#x27;</span>]&#125;</span> <span class="subst">&#123;mode_name&#125;</span>&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;hr style=&quot;margin: 0.5rem 0; border-color: <span class="subst">&#123;config[<span class="string">&#x27;color&#x27;</span>]&#125;</span>;&quot;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">&#123;<span class="string">&quot;Debate complex topics with AI opponents&quot;</span> <span class="keyword">if</span> mode_name == <span class="string">&quot;Debate&quot;</span> <span class="keyword">else</span> </span></span></span><br><span class="line"><span class="subst"><span class="string">                 <span class="string">&quot;Analyze research papers through simulated interviews&quot;</span> </span></span></span><br><span class="line"><span class="subst"><span class="string">                 <span class="keyword">if</span> mode_name == <span class="string">&quot;Paper Digest&quot;</span> <span class="keyword">else</span> </span></span></span><br><span class="line"><span class="subst"><span class="string">                 <span class="string">&quot;Experience academic peer-review process&quot;</span>&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>, unsafe_allow_html=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># === 側邊欄配置 ===</span></span><br><span class="line"><span class="keyword">with</span> st.sidebar:</span><br><span class="line">    st.header(<span class="string">&quot;⚙️ Configuration&quot;</span>)</span><br><span class="line">    api_key = st.text_input(<span class="string">&#x27;OpenAI API Key 🔑&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;password&#x27;</span>)  <span class="comment"># API密鑰輸入</span></span><br><span class="line">    mode = st.selectbox(<span class="string">&#x27;Select Mode 📖&#x27;</span>, <span class="built_in">list</span>(MODES.keys()),  <span class="comment"># 模式選擇</span></span><br><span class="line">                       format_func=<span class="keyword">lambda</span> x: <span class="string">f&quot;<span class="subst">&#123;MODES[x][<span class="string">&#x27;icon&#x27;</span>]&#125;</span> <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">                       </span><br><span class="line"><span class="comment"># 初始化會話狀態</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;bot1_mesg&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">    st.session_state[<span class="string">&quot;bot1_mesg&quot;</span>] = []  <span class="comment"># 辯論模式機器人1訊息</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;bot2_mesg&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">    st.session_state[<span class="string">&quot;bot2_mesg&quot;</span>] = []  <span class="comment"># 辯論模式機器人2訊息</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;message_counter&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">    st.session_state[<span class="string">&quot;message_counter&quot;</span>] = <span class="number">0</span>  <span class="comment"># 訊息計數器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用對話容器</span></span><br><span class="line">conversation_container = st.container()</span><br><span class="line"><span class="comment"># === 辯論模式流程 ===</span></span><br><span class="line"><span class="keyword">if</span> mode == <span class="string">&#x27;Debate&#x27;</span>:</span><br><span class="line">    scenario = st.sidebar.text_input(<span class="string">&#x27;Debate Topic 💬&#x27;</span>)</span><br><span class="line">    role_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;role1&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Proponent&#x27;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;role2&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Opponent&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    time_delay = <span class="number">5</span></span><br><span class="line">    session_length = st.sidebar.selectbox(<span class="string">&#x27;Session Length ⏰&#x27;</span>, SESSION_LENGTHS)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> st.sidebar.button(<span class="string">&#x27;Generate Debate&#x27;</span>):</span><br><span class="line">        missing = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_key: missing.append(<span class="string">&quot;OpenAI API Key&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scenario: missing.append(<span class="string">&quot;Debate Topic&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> missing:</span><br><span class="line">            st.sidebar.error(<span class="string">f&quot;Missing required fields: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(missing)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.environ[<span class="string">&quot;OPENAI_API_KEY&quot;</span>] = api_key</span><br><span class="line">            <span class="keyword">with</span> conversation_container:</span><br><span class="line">                st.write(<span class="string">f&quot;&quot;&quot;#### Debate 💬: <span class="subst">&#123;scenario&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> st.spinner(<span class="string">&quot;Setting up debate arena...&quot;</span>):</span><br><span class="line">                        <span class="comment"># 初始化雙AI系統</span></span><br><span class="line">                    DualDebateBots = DualDebateBots(<span class="string">&#x27;OpenAI&#x27;</span>, role_dict, scenario, session_length)</span><br><span class="line">                    st.session_state[<span class="string">&#x27;DualDebateBots&#x27;</span>] = DualDebateBots </span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 執行預定次數的辯論回合</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX_EXCHANGE_COUNTS[session_length][<span class="string">&#x27;Debate&#x27;</span>]):</span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Bots are debating...&quot;</span>):</span><br><span class="line">                        output1, output2 = DualDebateBots.step() <span class="comment"># 單回合辯論</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 渲染對話氣泡</span></span><br><span class="line">                    mesg_1 = &#123;<span class="string">&quot;role&quot;</span>: DualDebateBots.chatbots[<span class="string">&#x27;role1&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;content&quot;</span>: output1&#125;</span><br><span class="line">                    mesg_2 = &#123;<span class="string">&quot;role&quot;</span>: DualDebateBots.chatbots[<span class="string">&#x27;role2&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;content&quot;</span>: output2&#125;</span><br><span class="line">                    </span><br><span class="line">                    new_count = message(<span class="string">f&quot;<span class="subst">&#123;mesg_1[<span class="string">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>, is_user=<span class="literal">False</span>, </span><br><span class="line">                                    avatar_style=<span class="string">&quot;bottts&quot;</span>, seed=AVATAR_SEED[<span class="number">0</span>],</span><br><span class="line">                                    key=st.session_state[<span class="string">&quot;message_counter&quot;</span>])</span><br><span class="line">                    st.session_state[<span class="string">&quot;message_counter&quot;</span>] += <span class="number">1</span></span><br><span class="line">                    time.sleep(time_delay)</span><br><span class="line">                    new_count = message(<span class="string">f&quot;<span class="subst">&#123;mesg_2[<span class="string">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>, is_user=<span class="literal">True</span>,</span><br><span class="line">                                    avatar_style=<span class="string">&quot;bottts&quot;</span>, seed=AVATAR_SEED[<span class="number">1</span>],</span><br><span class="line">                                    key=st.session_state[<span class="string">&quot;message_counter&quot;</span>])</span><br><span class="line">                    st.session_state[<span class="string">&quot;message_counter&quot;</span>] += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 保存歷史記錄</span></span><br><span class="line">                    st.session_state.bot1_mesg.append(mesg_1)</span><br><span class="line">                    st.session_state.bot2_mesg.append(mesg_2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成辯論總結</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;DualDebateBots&#x27;</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">        <span class="keyword">with</span> st.expander(<span class="string">&#x27;Debate Summary&#x27;</span>):</span><br><span class="line">            scripts = [<span class="string">f&quot;Pro: <span class="subst">&#123;m1[<span class="string">&#x27;content&#x27;</span>]&#125;</span>\nCon: <span class="subst">&#123;m2[<span class="string">&#x27;content&#x27;</span>]&#125;</span>&quot;</span> </span><br><span class="line">                    <span class="keyword">for</span> m1,m2 <span class="keyword">in</span> <span class="built_in">zip</span>(st.session_state.bot1_mesg, st.session_state.bot2_mesg)]</span><br><span class="line">            st.write(st.session_state[<span class="string">&#x27;DualDebateBots&#x27;</span>].summary(scripts))</span><br><span class="line"><span class="comment"># === 論文解析模式流程 ===</span></span><br><span class="line"><span class="keyword">elif</span> mode == <span class="string">&#x27;Paper Digest&#x27;</span>:</span><br><span class="line">    topic = st.sidebar.text_input(<span class="string">&#x27;Paper Topic 🧪&#x27;</span>)</span><br><span class="line">    abstract = st.sidebar.text_area(<span class="string">&#x27;Abstract 📝&#x27;</span>)</span><br><span class="line">    uploaded_file = st.sidebar.file_uploader(<span class="string">&quot;Upload PDF paper 📄&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;pdf&quot;</span>) <span class="comment"># 文件上傳</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> st.sidebar.button(<span class="string">&#x27;Generate Interview&#x27;</span>):</span><br><span class="line">        missing = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_key: missing.append(<span class="string">&quot;OpenAI API Key&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> topic: missing.append(<span class="string">&quot;Paper Topic&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> abstract.strip(): missing.append(<span class="string">&quot;Abstract&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uploaded_file: missing.append(<span class="string">&quot;PDF upload&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> missing:</span><br><span class="line">            st.sidebar.error(<span class="string">f&quot;Missing required fields: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(missing)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.environ[<span class="string">&quot;OPENAI_API_KEY&quot;</span>] = api_key</span><br><span class="line">            <span class="keyword">with</span> conversation_container:</span><br><span class="line">                st.write(<span class="string">f&quot;#### Paper Digest: <span class="subst">&#123;topic&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> st.spinner(<span class="string">&quot;Initializing bots...&quot;</span>):</span><br><span class="line">                        <span class="comment"># 處理上傳文件</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;temp.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(uploaded_file.getbuffer())</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 構建論文向量資料庫</span></span><br><span class="line">                    loader = PyPDFLoader(<span class="string">&quot;temp.pdf&quot;</span>)</span><br><span class="line">                    pages = loader.load_and_split()</span><br><span class="line">                    embeddings = OpenAIEmbeddings()</span><br><span class="line">                    vectorstore = FAISS.from_documents(pages, embeddings)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 初始化記者與作者AI</span></span><br><span class="line">                    journalist = JournalistBot(<span class="string">&#x27;OpenAI&#x27;</span>)</span><br><span class="line">                    journalist.instruct(topic, abstract)</span><br><span class="line">                    author = AuthorBot(<span class="string">&#x27;OpenAI&#x27;</span>, vectorstore)</span><br><span class="line">                    author.instruct(topic)</span><br><span class="line">                    </span><br><span class="line">                    st.session_state.interview_history = []</span><br><span class="line">                    question = journalist.step(<span class="string">&quot;&quot;</span>) <span class="comment"># 生成首個問題</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 進行六輪問答</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Journalist is thinking...&quot;</span>):</span><br><span class="line">                        st.session_state.interview_history.append((<span class="string">&quot;Q&quot;</span>, question))</span><br><span class="line">                        message(question, key=<span class="string">f&quot;q_<span class="subst">&#123;_&#125;</span>&quot;</span>, avatar_style=<span class="string">&quot;bottts&quot;</span>, seed=AVATAR_SEED[<span class="number">0</span>])</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Author is responding...&quot;</span>):</span><br><span class="line">                        answer, _ = author.step(question)</span><br><span class="line">                        st.session_state.interview_history.append((<span class="string">&quot;A&quot;</span>, answer))</span><br><span class="line">                        message(answer, is_user=<span class="literal">True</span>, key=<span class="string">f&quot;a_<span class="subst">&#123;_&#125;</span>&quot;</span>, avatar_style=<span class="string">&quot;bottts&quot;</span>, seed=AVATAR_SEED[<span class="number">1</span>])</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Generating next question...&quot;</span>):</span><br><span class="line">                        question = journalist.step(answer) <span class="comment"># 基於回答生成新問題</span></span><br><span class="line">                    </span><br><span class="line">                    time.sleep(<span class="number">1</span>) <span class="comment"># 流程節奏控制</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 生成最終摘要</span></span><br><span class="line">                <span class="keyword">with</span> st.spinner(<span class="string">&quot;Generating summary...&quot;</span>):</span><br><span class="line">                    st.session_state.interview_summary = author.summary(</span><br><span class="line">                        <span class="string">&quot;\n&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;t&#125;</span>: <span class="subst">&#123;c&#125;</span>&quot;</span> <span class="keyword">for</span> t,c <span class="keyword">in</span> st.session_state.interview_history])</span><br><span class="line">                    )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 顯示解析摘要</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;interview_history&#x27;</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">        <span class="keyword">with</span> st.expander(<span class="string">&quot;Interview Summary&quot;</span>):</span><br><span class="line">            st.markdown(<span class="string">&quot;**Key Insights:**&quot;</span>)</span><br><span class="line">            st.write(st.session_state.interview_summary)</span><br><span class="line"><span class="comment"># === 同行評審模式流程 ===</span></span><br><span class="line"><span class="keyword">elif</span> mode == <span class="string">&#x27;Peer-review Simulation&#x27;</span>:</span><br><span class="line">    st.sidebar.markdown(<span class="string">&quot;### Paper Submission&quot;</span>)</span><br><span class="line">    paper_title = st.sidebar.text_input(<span class="string">&#x27;Paper Title 📝&#x27;</span>)</span><br><span class="line">    paper_abstract = st.sidebar.text_area(<span class="string">&#x27;Abstract 🔬&#x27;</span>, height=<span class="number">150</span>)</span><br><span class="line">    uploaded_paper = st.sidebar.file_uploader(<span class="string">&quot;Upload Submission PDF 📄&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;pdf&quot;</span>)</span><br><span class="line">    review_focus = st.sidebar.multiselect(<span class="string">&#x27;Review Focus Areas&#x27;</span>, </span><br><span class="line">        [<span class="string">&#x27;Methodology&#x27;</span>, <span class="string">&#x27;Results&#x27;</span>, <span class="string">&#x27;Ethics&#x27;</span>, <span class="string">&#x27;Originality&#x27;</span>, <span class="string">&#x27;Reproducibility&#x27;</span>]) <span class="comment"># 多選審查項</span></span><br><span class="line">    rigor_level = st.sidebar.slider(<span class="string">&#x27;Review Rigor Level&#x27;</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">50</span>) <span class="comment"># 嚴謹度滑桿</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> st.sidebar.button(<span class="string">&#x27;Start Review Process&#x27;</span>):</span><br><span class="line">        missing = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_key: missing.append(<span class="string">&quot;OpenAI API Key&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> paper_title: missing.append(<span class="string">&quot;Paper Title&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> paper_abstract.strip(): missing.append(<span class="string">&quot;Abstract&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uploaded_paper: missing.append(<span class="string">&quot;PDF upload&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> review_focus: missing.append(<span class="string">&quot;Review Focus Areas&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> missing:</span><br><span class="line">            st.sidebar.error(<span class="string">f&quot;Missing required fields: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(missing)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.environ[<span class="string">&quot;OPENAI_API_KEY&quot;</span>] = api_key</span><br><span class="line">            <span class="keyword">with</span> conversation_container:</span><br><span class="line">                st.write(<span class="string">f&quot;#### Peer Review: <span class="subst">&#123;paper_title&#125;</span>&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 處理PDF稿件</span></span><br><span class="line">                <span class="keyword">with</span> st.spinner(<span class="string">&quot;Initializing review process...&quot;</span>):</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;review_temp.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(uploaded_paper.getbuffer())</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 構建向量資料庫（預留檢索功能）</span></span><br><span class="line">                    loader = PyPDFLoader(<span class="string">&quot;review_temp.pdf&quot;</span>)</span><br><span class="line">                    pages = loader.load_and_split()</span><br><span class="line">                    embeddings = OpenAIEmbeddings()</span><br><span class="line">                    vectorstore = FAISS.from_documents(pages, embeddings)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 初始化作者與評審AI</span></span><br><span class="line">                    author_bot = PeerReviewAuthorBot(<span class="string">&#x27;OpenAI&#x27;</span>)</span><br><span class="line">                    author_bot.instruct(paper_title, paper_abstract, vectorstore)</span><br><span class="line">                    </span><br><span class="line">                    reviewer_bot = PeerReviewReviewerBot(<span class="string">&#x27;OpenAI&#x27;</span>)</span><br><span class="line">                    reviewer_bot.instruct(paper_title, paper_abstract, review_focus, rigor_level)</span><br><span class="line">                    </span><br><span class="line">                    st.session_state.review_history = []</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 四輪問答流程</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Reviewer is formulating question...&quot;</span>):</span><br><span class="line">                        question = reviewer_bot.generate_question()</span><br><span class="line">                        st.session_state.review_history.append((<span class="string">&quot;Reviewer&quot;</span>, question))</span><br><span class="line">                        message(question, is_user=<span class="literal">False</span>, avatar_style=<span class="string">&quot;bottts&quot;</span>, </span><br><span class="line">                               seed=AVATAR_SEED[<span class="number">0</span>], key=<span class="string">f&quot;rev_q_<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">with</span> st.spinner(<span class="string">&quot;Author is preparing response...&quot;</span>):</span><br><span class="line">                        answer = author_bot.respond_to_question(question)</span><br><span class="line">                        st.session_state.review_history.append((<span class="string">&quot;Author&quot;</span>, answer))</span><br><span class="line">                        message(answer, is_user=<span class="literal">True</span>, avatar_style=<span class="string">&quot;bottts&quot;</span>,</span><br><span class="line">                               seed=AVATAR_SEED[<span class="number">1</span>], key=<span class="string">f&quot;rev_a_<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 生成最終裁決</span></span><br><span class="line">                <span class="keyword">with</span> st.spinner(<span class="string">&quot;Generating final verdict...&quot;</span>):</span><br><span class="line">                    verdict = reviewer_bot.generate_verdict()</span><br><span class="line">                    st.session_state.review_history.append((<span class="string">&quot;Verdict&quot;</span>, verdict))</span><br><span class="line">                    st.session_state.review_summary = &#123;</span><br><span class="line">                        <span class="string">&quot;critiques&quot;</span>: reviewer_bot.summarize_critiques(),</span><br><span class="line">                        <span class="string">&quot;responses&quot;</span>: author_bot.summarize_responses()</span><br><span class="line">                    &#125;</span><br><span class="line">                </span><br><span class="line">                st.markdown(<span class="string">f&quot;**Final Verdict:**\n\n<span class="subst">&#123;verdict&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 顯示評審總結</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;review_history&#x27;</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">        <span class="keyword">with</span> st.expander(<span class="string">&quot;Review Summary&quot;</span>):</span><br><span class="line">            st.markdown(<span class="string">&quot;**Key Critique Points:**&quot;</span>)</span><br><span class="line">            st.write(st.session_state.review_summary[<span class="string">&#x27;critiques&#x27;</span>])</span><br><span class="line">            st.markdown(<span class="string">&quot;**Author Responses:**&quot;</span>)</span><br><span class="line">            st.write(st.session_state.review_summary[<span class="string">&#x27;responses&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Requirements-txt"><a href="#Requirements-txt" class="headerlink" title="Requirements.txt"></a>Requirements.txt</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Core dependencies</span><br><span class="line">langchain==0.0.309  # For creating conversational AI chains and prompts</span><br><span class="line">openai==1.3.0     # Required for ChatOpenAI and OpenAIEmbeddings</span><br><span class="line">faiss-cpu==1.7.4  # For vector storage and similarity search</span><br><span class="line">pypdf==3.17.1     # For PDF document loading (used by PyPDFLoader)</span><br><span class="line"></span><br><span class="line"># Web interface</span><br><span class="line">streamlit==1.28.0           # Main web framework</span><br><span class="line">streamlit-chat==0.1.1       # For chat interface components</span><br></pre></td></tr></table></figure></div>

<p>PS：faiss-cpu 目前僅支援 Python 3.7 - 3.11，不支援 Python 3.12</p>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Streamlit</tag>
        <tag>Langchain</tag>
      </tags>
  </entry>
</search>
